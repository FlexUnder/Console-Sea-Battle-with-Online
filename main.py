import random
import os
import time
import json
import platform
import netcode


def main():
    while True:
        connection, is_server = start_menu()
        if is_server:
            netcode.send_data(connection, '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ')
        else:
            time.sleep(1)
            print(netcode.listen_data(connection))
        start_game(connection, is_server)


def start_menu():
    clear_console()
    print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–π, boy!\n')
    print('  –í—ã–±–∏—Ä–µ—Ç–µ —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (q —á—Ç–æ–±—ã –≤—ã–π—Ç–∏): ')
    print('\t1. –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä')
    print('\t2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–ø–æ ip)')
    is_server = False
    while True:
        choise = input('\t ~> ')
        if choise == '1':
            connection = netcode.start_server()
            is_server = True
            break
        if choise == '2':
            ip_server = input('–í–≤–µ–¥–∏—Ç–µ ip —Å–µ—Ä–≤–µ—Ä–∞: ')
            connection, success = netcode.connect_to_server(ip_server)
            if success:
                break
            else:
                print('\n  –í—ã–±–∏—Ä–µ—Ç–µ —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ')
                print('\t1. –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä')
                print('\t2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–ø–æ ip)')
                continue
        if choise == 'q':
            print('–ó–∞–≤–µ—Ä—à–∏–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
            exit()
        print('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ 1/2')
    return connection, is_server


def start_game(connection, is_server):
    field = [['üåä'] * 10 for _ in range(10)]
    preparation_phase(field, connection)
    answer = netcode.listen_data(connection)
    print('–û–±–∞ –∏–≥—Ä–æ–∫–∞ –≥–æ—Ç–æ–≤—ã!')
    time.sleep(2)
    print('\n ...')
    time.sleep(3)
    shooting_phase(field, connection, is_server)


def preparation_phase(field, connection):  # –§–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    def is_placement_valid():
        if (y1 == y2 and abs(x1 - x2) > 3) or (x1 == x2 and abs(y1 - y2) > 3) or (x1 != x2 and y1 != y2):
            return "–¢–∞–∫–æ–π –∫–æ—Ä–∞–±–ª—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
        if (y1 == y2 and ships_in_stock[abs(x1 - x2)] == 0) or (x1 == x2 and ships_in_stock[abs(y1 - y2)] == 0):
            return '–ö–æ—Ä–∞–±–ª–∏ —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'
        for x in range(min(x1, x2), max(x1, x2) + 1):
            for y in range(min(y1, y2), max(y1, y2) + 1):
                if (field[y][x] == 'üö¢') or (y != 9 and field[y + 1][x] == 'üö¢') or (y != 0 and field[y - 1][x] == 'üö¢') or \
                    (x != 9 and field[y][x + 1] == 'üö¢') or (x != 0 and field[y][x - 1] == 'üö¢') or \
                    ((x != 0 and y != 0) and field[y - 1][x - 1] == 'üö¢') or ((x != 9 and y != 9) and field[y + 1][x + 1] == 'üö¢') or \
                    ((x != 0 and y != 9) and field[y + 1][x - 1] == 'üö¢') or ((x != 9 and y != 0) and field[y - 1][x + 1] == 'üö¢'):
                    return "–ö–æ—Ä–∞–±–ª–∏ –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –∏–ª–∏ —Å—Ç–æ—è—Ç—å —Å–ª–∏—à–∫–æ–º –±–ª–∏–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É."
        return False
    # def delete():
    clear_console()
    ships_in_stock = {0: 4, 1: 3, 2: 2, 3: 1}
    while list(ships_in_stock.values()) != [0] * 4:
        clear_console()
        print('\n\t –§–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏')
        print_field(field)
        print('–ü—Ä–∞–≤–∏–ª–∞ —á—Ç–æ –º—ã –¥–µ–ª–∞–µ–º —ç—ç—ç—ç—Ö –∑ –µ—É –ø–æ—Ç–æ–º –Ω–∞–ø–∏—à–µ–º')
        print(f'\n–£ –≤–∞—Å –≤ —Ä–∞—Å–ø–æ–ø—è–∂–µ–Ω–∏–∏: \nüö¢ - {ships_in_stock[0]}\
              \nüö¢üö¢ - {ships_in_stock[1]}\nüö¢üö¢üö¢ - {ships_in_stock[2]}\nüö¢üö¢üö¢üö¢ - {ships_in_stock[3]}')
        x1, y1 = input_coordinate('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏: ')
        if x1 == -1:
            connection.close()
            exit()
        x2, y2 = input_coordinate('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏: ')
        if x2 == -1:
            connection.close()
            exit()

        if is_placement_valid():
            print(is_placement_valid())
            print('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (–Ω–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)')
            input()
            continue
        current_ships_parts = 0
        for x in range(10):
            for y in range(10):
                if (x1 <= x <= x2 or x2 <= x <= x1) and (y1 <= y <= y2 or y2 <= y <= y1):
                    current_ships_parts += 1
                    field[y][x] = 'üö¢'
        ships_in_stock[current_ships_parts - 1] -= 1
    clear_console()
    print('\t –§–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏')
    print_field(field)
    print('\n–í—Å–µ –∫–æ—Ä–∞–±–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã, –æ–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...')
    netcode.send_data(connection, 'ready|')


def shooting_phase(field, connection, is_server):  # –§–∞–∑–∞ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ (—Ö–æ–¥–∞)
    def is_hit(x, y, corpse):
        corpse.append((x, y))
        if (y != 9 and field[y + 1][x] == 'üö¢') or (y != 0 and field[y - 1][x] == 'üö¢')\
              or (y != 9 and field[y + 1][x] == 'üí•') or (y != 0 and field[y - 1][x] == 'üí•'):
            vertical = True
        elif (x != 9 and field[y][x + 1] == 'üö¢') or (x != 0 and field[y][x - 1] == 'üö¢')\
            or (x != 9 and field[y][x + 1] == 'üí•') or (x != 0 and field[y][x - 1] == 'üí•'):
            vertical = False
        else:
            corpse.append((x, y))
            return False
        if vertical:
            for i in range(1, 4):
                if y + i <= 9:
                    if field[y + i][x] == 'üåä' or field[y + i][x] == 'üåÄ':
                        break
                    corpse.append((x, y + i))
                    if field[y + i][x] == 'üö¢':
                        return True
            for i in range(1, 4):
                if y - i >= 0:
                    if field[y - i][x] == 'üåä' or field[y - i][x] == 'üåÄ':
                        break
                    corpse.append((x, y - i))
                    if field[y - i][x] == 'üö¢':
                        return True
        else:
            for i in range(1, 4):
                if x + i <= 9:
                    if field[y][x + i] == 'üåä' or field[y][x + i] == 'üåÄ':
                        break
                    corpse.append((x + i, y))
                    if field[y][x + i] == 'üö¢':
                        return True
            for i in range(1, 4):
                if x - i >= 0:
                    if field[y][x - i] == 'üåä' or field[y][x - i] == 'üåÄ':
                        break
                    corpse.append((x - i, y))
                    if field[y][x - i] == 'üö¢':
                        return True
        return False
    def is_shoot_invalid(x, y):
        if field_blind[y][x] != 'üå´Ô∏è':
            return '\n–≠—Ç–∞ –æ–±–ª–∞—Å—Ç—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞. –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å'
    def open_water_area(x, y):
        for i in range(-1, 2):
            for j in range(-1, 2):
                if x + i > 9 or y + j > 9 or x + i < 0 or y + j < 0:
                    continue
                if field_blind[y + j][x + i] == 'üå´Ô∏è':
                    field_blind[y + j][x + i] = 'üåä'
    def is_defeat():
        result = True
        for raw in field:
            if 'üö¢' in raw:
                result = False
        return result
    clear_console()
    if is_server:
        turn = random.choice(['server', 'client'])
        netcode.send_data(connection, turn)
    else:
        turn = netcode.listen_data(connection)
    field_blind = [['üå´Ô∏è'] * 10 for _ in range(10)]
    winner = False
    while True:
        turn_swap = True
        if is_server and turn == 'server' or not is_server and turn == 'client':
            print('\t\t–í–∞—à —Ö–æ–¥')
            print_field(field_blind)
            x, y = input_coordinate('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≤—ã—Å—Ç—Ä–µ–ª–∞: ')
            if x == -1 or y == -1:
                connection.close()
                exit()
            if is_shoot_invalid(x, y):
                print(is_shoot_invalid(x, y))
                input()
                clear_console()
                continue
            netcode.send_data(connection, f'{x},{y}')
            response = netcode.listen_data(connection)
            result = ''
            if response == 'hit':
                field_blind[y][x] = 'üí•'
                result = '–¢–æ—á–Ω–æ –≤ —Ü–µ–ª—å!'
                turn_swap = False
            elif response == 'miss':
                field_blind[y][x] = 'üí¶'
                # time.sleep(0.25)
                field_blind[y][x] = 'üåÄ'
                # time.sleep(0.25)
                field_blind[y][x] = 'üåä'
                result = '–ü—Ä–æ–º–∞—à–∫–∞.'
            else:
                field_blind[y][x] = 'üí•'
                replace = json.loads(str(response).split('|')[1])
                # time.sleep(0.5)
                for coords in replace:
                    xd, yd = coords[0], coords[1]
                    field_blind[yd][xd] = 'üõü'
                    open_water_area(xd, yd)
                    # time.sleep(0.1)
                result = '–£–±–∏–ª!'
                turn_swap = False
            clear_console()
            print('\t\t–í–∞—à —Ö–æ–¥')
            print_field(field_blind)
            print(result)
        else:
            print('\t –•–æ–¥ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞')
            print_field(field)
            x, y = list(map(int, str(netcode.listen_data(connection)).split(',')))
            result = ''
            if field[y][x] == 'üö¢':
                field[y][x] = 'üí•'
                replace = []
                if is_hit(x, y, replace):
                    netcode.send_data(connection, 'hit')
                    result = '–ø–æ–ø–∞–ª'
                else:
                    for coords in replace:
                        xd, yd = coords[0], coords[1]
                        field[yd][xd] = 'üõü'
                        # time.sleep(0.1)
                    send_data(connection, 'destroyed|' + json.dumps(replace))
                    result = '–ø–æ—Ç–æ–ø–∏–ª —Å—É–¥–Ω–æ'
                turn_swap = False
            elif field[y][x] == 'üåä':
                field[y][x] = 'üí¶'
                # time.sleep(0.5)
                field[y][x] = 'üåÄ'
                netcode.send_data(connection, 'miss')
                result = '–ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è'
            clear_console()
            print('\t –•–æ–¥ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞')
            print_field(field)
            print(f'\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ {result}!')
        time.sleep(2)
        if is_defeat():
            netcode.send_data(connection, 'ggwp')
            winner = False
            break
        else:
            netcode.send_data(connection, 'go next')
        game_status_answer = netcode.listen_data(connection)
        if game_status_answer == 'go next':
            if turn_swap:
                if turn == 'server':
                    turn = 'client'
                else:
                    turn = 'server'
            else:
                clear_console()
        if game_status_answer == 'ggwp':
            winner = True
            break
    if winner:
        print('\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! ü•áüéâü§ô')
    else:
        print('\n –í–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò¢üò≠üò≠')
    print('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Enter')
    connection.close()
    input()


def input_coordinate(text):
    def is_input_invalid(_input):
        valid_alph = '0123456789abcdefghij'
        if len(_input) != 2:
            return '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥: –≤–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∏ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)'
        if _input[0].isdigit() == _input[1].isdigit():
            return '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥: –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É (A-J) –∏ —Å—Ç–æ–ª–±–µ—Ü (1-10)))'
        if _input[0] not in valid_alph or _input[1] not in valid_alph:
            return '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥: –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É (A-J) –∏ —Å—Ç–æ–ª–±–µ—Ü (1-10))'
        return False
    while True:
        input_first = list(input(text).replace('10', '0').replace(' ', '').lower())
        if input_first == ['q']:
            print('–ú–∞—Ç—á –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?[y/n]')
            if input('~>').lower() == 'y':
                return -1, -1
            else:
                continue
        if is_input_invalid(input_first):
            print(is_input_invalid(input_first))
            print('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (–Ω–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)')
            input()
        else:
            break
    UNIDIF = 97
    if input_first[0].isdigit():
        x, y = int(input_first[0]) - 1, ord(input_first[1]) - UNIDIF
    else:
        x, y = int(input_first[1]) - 1, ord(input_first[0]) - UNIDIF
    if x == -1:
        x = 9
    return x, y


def print_field(field):  # –≤—ã–≤–æ–¥ –ø–æ–ª—è
    print('   ‚ÇÅ„ÄÄ‚Äã‚ÇÇ„ÄÄ‚ÇÉ„ÄÄ‚ÇÑ„ÄÄ‚ÇÖ„ÄÄ‚ÇÜ„ÄÄ‚Çá„ÄÄ‚Çà„ÄÄ‚Çâ ‚ÇÅ‚ÇÄ')
    for i in range(10):
            a='·¥¨·¥Æ·∂ú·¥∞·¥±·∂†·¥≥·¥¥·¥µ·¥∂'  # ·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞·¥µ ≤
            print(f' {a[i]}', '|'.join(field[i]))


def clear_console():
    system = platform.system().lower()
    if system == "windows":
        os.system('cls')
    else:
        os.system('clear')


if __name__ == '__main__':
    main()